# name: Docker Build and Push Multi-Arch (Unified)

# on:
#   push:
#     branches: ["main"]

# jobs:
#   build:
#     runs-on: self-hosted
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Branch name
#         run: echo running on branch ${GITHUB_REF##*/}

#       - name: Current Version
#         run: echo current version $(node -p "require('./package.json').version")

#       - name: Save Version
#         run: echo "PACKAGE_VERSION=${GITHUB_REF##*/}-$(node -p "require('./package.json').version")" >> $GITHUB_ENV

#       - name: Current Version From Env
#         run: echo "Package version is ${{ env.PACKAGE_VERSION }}"

#       - name: DockerHub Login
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Build and push
#         uses: docker/build-push-action@v6
#         with:
#           platforms: linux/amd64,linux/arm64
#           push: true
#           context: .
#           file: ./Dockerfile
#           tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce:${{ env.PACKAGE_VERSION }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           # cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/ecommerce:cache
#           # cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/ecommerce:cache,mode=max
#           provenance: false
#           sbom: false

name: Docker Image CI/CD for Staging

on:
  push:
    branches: ["staging"]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build:
    name: Build and Deploy Staging
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Branch name
        run: echo running on branch ${GITHUB_REF##*/}

      - name: Store variables
        id: get-store
        run: |
          echo version=$(jq -r '.version' package.json) >> $GITHUB_OUTPUT
          echo branch=${GITHUB_REF##*/} >> $GITHUB_OUTPUT
      - name: Current Version
        run: echo "Current version is ${{ steps.get-store.outputs.version }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.repository }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.repository }}-
            ${{ runner.os }}-buildx-

      - name: Build and push with caching
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          context: .
          file: ./Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce:${{ steps.get-store.outputs.branch }}-${{ steps.get-store.outputs.version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
